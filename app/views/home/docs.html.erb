<% content_for(:title) { "Documentation" } %>
<% content_for(:meta_description) do %>
Learn how to install UndercoverCI for your repos, report coverage data and use the local CLI.
<% end %>

<div class="container py-5">
  <div class="row">
    <div class="col-12 mb-3">
      <h1 class="display-4">Documentation</h1>
      <p class="lead">Learn how to install UndercoverCI for your repos, report coverage data and use the local CLI.</p>
    </div>
    <div class="col-lg-4 col-md-3 px-3 docs-table-of-contents">
      <h6>Table of contents</h6>
      <ul class="list-unstyled">
        <li class=""><a href="#how-it-works">How it works</a></li>
        <li class=""><a href="#getting-started">Getting started</a>
          <ul>
            <li class=""><a href="#installation">Installation</a>
            <li class=""><a href="#reporting">Report test coverage</a>
            <li class=""><a href="#branch-cov">Branch coverage</a></li>
            <li class=""><a href="#verifying-setup">Verify your setup</a>
            <li class=""><a href="#undercover-cli">Bonus: shorten the feedback loop with local CLI</a>
          </ul>
        </li>
        <li class=""><a href="#configuration">Configuration</a>
          <ul>
            <li class=""><a href="#undercover-uploader">UndercoverCI uploader</a>
            <li class=""><a href="#parallel-tests">Parallel tests</a>
            <li class=""><a href="#ignoring-test-coverage-checks">Ignoring/skipping coverage</a></li>
            <li class=""><a href="#api">API access</a>
          </ul>
        </li>
        <li class=""><a href="https://github.com/grodowski/undercover-ci/blob/master/CHANGELOG.md">Changelog and release notes</a>
        <li class=""><a href="#development">Development</a>
      </ul>
    </div>

    <div class="col-lg-8 col-md-9">
      <h2 id="how-it-works">How it works</h2>

      <p>
        UndercoverCI is a robot who protects your Ruby codebase from untested code changes. It works with every Ruby project that can report test coverage with SimpleCov. Chances are, you're already doing that while running tests on a CI server.
      </p>

      <figure class="text-center my-4">
        <%= image_tag("passed-check.png", class: "border figure-img img-fluid docs-image-sm") %>
        <figcaption class="figure-caption text-center">A passed coverage check.</figcaption>
      </figure>

      <p>
        The GitHub App reacts to commit and pull request events by queueing a new <code>coverage</code> check. Once your tests finish and upload the coverage report file, UndercoverCI parses the commit diff and correlates the structure of your changes (classes, modules, methods and blocks) against the uploaded test coverage report. The result is a passed or failed commit check reported to GitHub.
      </p>

      <h5>Passed</h5>
      <p>
        When the diff lines have full test coverage, you'll see a passed check with an additional breakdown of all changed code locations. Use it to find additional test coverage improvement opportunities in the surrounding lines and methods - reviewing your pull request is a good time to do that.
      </p>

      <h5>Failed</h5>
      <p>
        When untested lines or branches are found, a failed check will highlight them and ask you to add tests. Once tests are added, the comments will go away and the check status will turn to passed ✅.
      </p>

      <figure class="text-center my-4">
        <%= image_tag("location-breakdown.png", class: "border docs-image") %>
        <figcaption class="figure-caption text-center">Every check from UndercoverCI, no matter whether passed or failed, includes some general stats: a list of changed methods, classes and blocks, their filenames, line coverage and branch coverage values.</figcaption>
      </figure>

      <hr/>
      <h2 id="getting-started" class="mt-5">Getting started</h2>

      Follow these 3 steps to get started with UndercoverCI and receive automated test coverage comments.

      <h4 id="installation" class="mt-5 mb-2">1. Install the app on your GitHub account</h4>
      <p>
        Sign up from the home page or just follow <%= link_to("the GitHub sign up link", "/auth/github?r=sign_up", method: :post) %> to sign up. You'll be prompted to install the app on your GitHub account or organization and give permissions to selected repositories.
      </p>

      <div class="alert alert-info" role="alert">
        UndercoverCI is a subscription-based GitHub integration, although you can use it free of charge for public repositories, individual GitHub accounts and educational purposes.<br/><br/> For organizations, see the <%= link_to "pricing page", pricing_page_path, class: "alert-link" %> for more information as well as self-hosted options that will remain free forever.
      </div>

      <p>
        Once installed, UndercoverCI will send checks for every commit and pull request. There is just one final step to receive meaningful coverage results in them.
      </p>

      <h4 id="reporting" class="mt-5 mb-2">2. Report test coverage data to UndercoverCI</h4>

      <p>
        UndercoverCI analyses each commit against a matching test coverage file. Make sure your Ruby project reports test coverage and uploads the report file to UndercoverCI by following the instructions below:
      </p>

      <p>If your CI system isn't listed below, take a look at the general <a href="#undercover-uploader">uploader documentation</a> for more details.</p>

      <%= render partial: "partials/coverage_upload_instruction" %>

      <h4 id="verifying-setup" class="mt-5 mb-2">3. Verify your setup</h4>

      <p>
        You have installed the UndercoverCI GitHub app and configured your CI to publish test coverage reports for analysis. In order to verify that your setup is working, create a branch and push a small code change to your repository – adding a dummy method should suffice to trigger a sample coverage warning:
      </p>

      <figure class="text-center my-4">
        <%= image_tag("annotation.png", class: "border docs-image") %>
        <figcaption class="figure-caption text-center">A GitHub code annotation triggered by untested diff lines.</figcaption>
      </figure>

      <p>
        If you made it here, it means your code review setup with UndercoverCI is ready!
      </p>

      <h4 id="branch-cov" class="mt-5 mb-2">Branch coverage</h4>

      <p>UndercoverCI and <code>undercover</code> CLI (starting with version <code>>= 0.4.0</code>) both accept coverage reports with branch coverage data.</p> The <a href="#reporting">configuration example</a> already shows how to enable branch coverage in SimpleCov, which is all you need to receive more fine-grained coverage checks.

      <p>If you decide to enable branch coverage reporting, every changed line of code with at least one uncovered branch will be flagged and result in a GitHub annotation for the entire method. This is a more rigorous approach compared to just validating line-by-line test coverage.</p>

      <h4 id="undercover-cli" class="mt-5 mb-2">Bonus: shorten the feedback loop with the local CLI</h4>

      <p>
        UndercoverCI coverage comments are generated by the undercover ruby gem that you can use locally too. While GitHub Check comments provide coding standards and consistency, you can shorten your feedback loop and check for missing coverage with every local commit thanks to the <code>undercover</code> CLI command.

        You can install it from RubyGems with:
        <pre><code>
          gem install undercover
        </code></pre>
        Then, check for missing coverage inside uncommited changes by running specs and invoking <code>undercover</code>. Use the <code>--compare</code> flag to compare against a specific commit or branch, which is similar to what UndercoverCI performs when analysing your pushed pull requests:
        <pre><code>
          undercover --compare base-branch
          undercover --compare HEAD~1
        </code></pre>
      </p>
      <p>
        Visit the <a href="https://github.com/grodowski/undercover">undercover</a> GitHub page to see more examples including integrations with Overcommit and Pronto hooks.
      </p>

      <hr/>
      <h2 id="configuration" class="mt-5">Configuration</h2>
      <h4 id="undercover-uploader" class="mt-5 mb-2">UndercoverCI uploader</h4>

      <p>
        The uploader script runs in your CI build environment and uploads coverage reports to UndercoverCI. This way the coverage files are processed against a git diff and generate a commit check. A sample call for the <code>grodowski/undercover</code> repository built on CircleCI could look like this:

        <pre><code>
          ruby -e "$(curl -s https://undercover-ci.com/uploader.rb)" -- \
                    --repo grodowski/undercover \
                    --commit $CIRCLE_SHA1 \
                    --lcov coverage/lcov/undercover.lcov
        </code></pre>

        The <code>uploader.rb</code> script is securely downloaded and evaluated with the required command-line options:
      </p>
      <p>
        <h6 class="mb-2 mt-3"><code>--repo</code></h6>
        The <code>$org/$repo</code> formatted name matching exactly how your repository appears on GitHub.

        <h6 class="mb-2 mt-3"><code>--commit</code></h6>
        Current build commit SHA to identify on GitHub. This value will be provided by the CI build environment, e.g.
        <code>$CIRCLE_SHA1</code> for CircleCI, <code>${{ github.event.pull_request.head.sha || github.sha }}</code> for
        GitHub Actions or <code>$TRAVIS_COMMIT</code> for TravisCI.</li> Consult your CI service documentation to get the
        right head SHA value for your build environment.

        <h6 class="mb-2 mt-3"><code>--lcov</code></h6>
        A relative path to the coverage report, will look like <code>coverage/lcov/$reponame.lcov</code> unless SimpleCov's config defaults were changed.
      </p>

      <h4 id="parallel-tests" class="mt-5 mb-2">Parallel tests</h4>
      <p>
        If your CI build runs tests in parallel, there's an extra merge step to be performed before uploading coverage results, because the uploader script only accepts a single file at the time of writing this document. While partial coverage results might be supported in a future release, this Ruby snippet should get you started with merging multiple coverage reports:

        <pre><code>
          #!/usr/bin/env ruby
          # frozen_string_literal: true

          require 'simplecov'
          require 'simplecov-lcov'

          puts('Merging coverage results from parallel CircleCI tests containers into a single LCOV report...')

          SimpleCov.collate(Dir['/home/circleci/rspec/*.resultset.json']) do
            enable_coverage(:branch)
          end

          report_path = ARGV[0] || 'coverage.lcov'
          SimpleCov.formatter = SimpleCov::Formatter::LcovFormatter
          SimpleCov::Formatter::LcovFormatter.config.report_with_single_file = true
          SimpleCov::Formatter::LcovFormatter.config.single_report_path = report_path

          merged_result = SimpleCov.result
          merged_result.format!

          if File.size(report_path).zero?
            puts('Written report has 0 bytes')
            exit 1
          end
          puts("Done! LCOV saved to #{SimpleCov::Formatter::LcovFormatter.config.single_report_path}")
        </code></pre>
      </p>

      <h6>Parallel tests in <a href="https://guides.rubyonrails.org/testing.html#parallel-testing" target="_blank">Rails and Minitest</a></h6>
      <p>
        Try the snippet below to configure SimpleCov with <code>parallelize</code> in Rails and produce a single coverage output
        file that will be suitable for UndercoverCI.
        You can find more context in this <a href="https://github.com/simplecov-ruby/simplecov/issues/718#issuecomment-538201587" target="_blank">GitHub issue</a>.
        <pre><code>
          # test_helper.rb
          # ...
          parallelize(workers: :number_of_processors)

          parallelize_setup do |worker|
            SimpleCov.command_name "#{SimpleCov.command_name}-#{worker}"
          end

          parallelize_teardown do |worker|
            SimpleCov.result
          end
          # ...
        </code></pre>
      </p>

      <h4 id="ignoring-test-coverage-checks" class="mt-5 mb-2">Ignoring/skipping coverage</h4>
      <p>
        Pull requests in projects with low or nonexistent test coverage are likely to generate large numbers of check warnings. While the default workflow would be to address them before the PR approval, your strategy might be different.
      </p>

      <p>
        In order to acknowledge an untested change and remove the UndercoverCI warning with the intention to improve later (or never), you can wrap the code block with the <code>:nocov:</code> syntax, e.g.

        <pre><code>
          # :nocov:
          def skip_this_method
            never_reached
          end
          # :nocov:
        </code></pre>

        Read more about the <code>:nocov:</code> syntax in <a href="https://github.com/simplecov-ruby/simplecov#ignoringskipping-code" target="_blank">SimpleCov's readme</a>.
      </p>

      <h4 id="api" class="mt-5 mb-2">API V1</h4>

      <p>
        To access Undercover HTTP API, configure your per-user auth token using the API section of the Settings page.
      </p>

      <h5>GET /v1/checks/:commit_sha</h5>
      <p>
        Returns the coverage check information for the given commit SHA.

        Example:
        <pre><code>
          curl -H "Authorization: Bearer $UNDERCOVER_API_TOKEN" \
          https://undercover-ci.com/v1/checks/aa412c105eff7a7af918fc422bf5085101295798
        </code></pre>

        Response format:
        <pre><code>
          {
            "id": 327889,
            "head_sha": "aa412c105eff7a7af918fc422bf5085101295798",
            "base_sha": "master",
            "state": "complete",
            "state_log": [
              {
                "to": "awaiting_coverage",
                "ts": "2023-11-25T15:27:14Z",
                "from": "created"
              },
              {
                "to": "in_progress",
                "ts": "2023-11-25T15:28:48Z",
                "from": "awaiting_coverage"
              },
              {
                "to": "complete",
                "ts": "2023-11-25T15:37:22Z",
                "from": "in_progress"
              }
            ],
            "repo_full_name": "twitchy-tortoise/undercover-test"
          }
        </pre></code>
      </p>

      <h5>GET /v1/checks/:commit_sha/coverage</h5>
      <p>
        Returns the coverage report for the given commit SHA. The coverage report will be in the LCOV format.
        The `curl` example below includes the <code>-L</code> flag to ensure curl follows the redirect to the storage provider.
        <pre><code>
          curl -LH "Authorization: Bearer $UNDERCOVER_API_TOKEN" \
          -o check_coverage.lcov \
          https://undercover-ci.com/v1/checks/aa412c105eff7a7af918fc422bf5085101295798/coverage
        </code></pre>
      </p>

      <hr/>
      <h2 id="development" class="mt-5">Development</h2>
      <p>
        The UndercoverCI Github App and the underlying undercover gem are developed and available on GitHub under a standard MIT license. Your contributions are welcome!

        <ul>
          <li><a href="https://github.com/grodowski/undercover-ci">grodowski/undercover-ci</a></li>
          <li><a href="https://github.com/grodowski/undercover">grodowski/undercover</a></li>
        </ul>
      </p>
      <br/>
      <hr/>
    </div>
  </div>
</div>
